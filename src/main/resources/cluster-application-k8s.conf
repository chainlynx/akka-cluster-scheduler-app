include "cluster-application-base.conf"
include "telemetry-prometheus.conf"

akka {

  remote {
    artery {
      //canonical.hostname = ${clustering.ip}
      canonical.port = 2552
    }
  }

  discovery {
    kubernetes-api {
      pod-label-selector = "app=%s"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        # For the kubernetes API this value is substributed into the %s in pod-label-selector
        service-name = "akka-cluster-scheduler"
        port-name = "akka-mgmt-http"
        # pick the discovery method you'd like to use:
        discovery-method = kubernetes-api
      }
    }
  }

  cluster {
    roles=["backend", "k8s"]
    shutdown-after-unsuccessful-join-seed-nodes = 40s
  }

  coordinated-shutdown.terminate-actor-system = on
  coordinated-shutdown.exit-jvm = on

  persistence {

    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

    cassandra {
      journal {
        keyspace-autocreate = true
        tables-autocreate = true
      }
      snapshot {
        keyspace-autocreate = true
        tables-autocreate = true
      }
    }

  }

}

//clustering {
//  ip = "127.0.0.1"
//  port = 2552
//  defaultPort = ${clustering.port}
//  seed-ip = "127.0.0.1"
//  seed-port = 2552
//}

//clustering {
//  ip = "127.0.0.1"
//  ip = ${?CLUSTER_IP}
//  port = 1600
//  defaultPort = 0
//
//  seed-ip = "127.0.0.1"
//  seed-ip = ${?CLUSTER_IP}
//  seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
//  seed-port = 1600
//  seed-port = ${?SEED_PORT_1600_TCP_PORT}
//  cluster.name = AkkaSchedulerCluster
//  cassandra.contactpoint1 = ${?CASSANDRA_CONTACT_POINT1}
//}

clustering {
  cassandra.contactpoint1 = ${?CASSANDRA_CONTACT_POINT1}
  ip = ""
  port = 2552
  defaultPort = ${clustering.port}
}

datastax-java-driver {
  advanced.reconnect-on-init = true
  basic.contact-points = [${clustering.cassandra.contactpoint1}]
  basic.load-balancing-policy.local-datacenter = "datacenter1"
}